/* This is an auto-generated file.  Do not modify. */

namespace DTDLParser
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.Linq;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using DTDLParser.Models;

    /// <summary>
    /// Class for parsing and storing information from JSON-LD context blocks.
    /// </summary>
    internal partial class ContextCollection
    {
        static ContextCollection()
        {
            DtdlVersionsAllowingLocalTerms = new HashSet<int>() {  };

            DtdlVersionsRestrictingKeywords = new HashSet<int>() { 3 };

            EndogenousAffiliateContextsImplicitDtdlVersions = new Dictionary<string, int>();
            EndogenousAffiliateContextsImplicitDtdlVersions["dtmi:iotcentral:context;2"] = 2;

            DtdlContextHistory = GetDtdlContextHistory();

            EndogenousAffiliateContextHistories = new Dictionary<string, ContextHistory>();

            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:annotation"] = GetAffiliate0ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:historization"] = GetAffiliate1ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:initialization"] = GetAffiliate2ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:optionality"] = GetAffiliate3ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:overriding"] = GetAffiliate4ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:quantitativeTypes"] = GetAffiliate5ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:dtdl:extension:streaming"] = GetAffiliate6ContextHistory();
            EndogenousAffiliateContextHistories["dtmi:iotcentral:context"] = GetAffiliate7ContextHistory();
        }

        private static ContextHistory GetAffiliate0ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:annotation;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("annotates", new Dtmi("dtmi:dtdl:extension:annotation:v1:ValueAnnotation:annotates"), isMergeableType: false);
            context1_0.AddTermDefinition("ValueAnnotation", new Dtmi("dtmi:dtdl:extension:annotation:v1:ValueAnnotation"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate1ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:historization;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("Historized", new Dtmi("dtmi:dtdl:extension:historization:v1:Historized"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate2ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:initialization;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("Initialized", new Dtmi("dtmi:dtdl:extension:initialization:v1:Initialized"), isMergeableType: false);
            context1_0.AddTermDefinition("initialValue", new Dtmi("dtmi:dtdl:extension:initialization:v1:Initialized:initialValue"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate3ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:optionality;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("defaultValue", new Dtmi("dtmi:dtdl:extension:optionality:v1:Optional:defaultValue"), isMergeableType: false);
            context1_0.AddTermDefinition("Optional", new Dtmi("dtmi:dtdl:extension:optionality:v1:Optional"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate4ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:overriding;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("Override", new Dtmi("dtmi:dtdl:extension:overriding:v1:Override"), isMergeableType: false);
            context1_0.AddTermDefinition("overrides", new Dtmi("dtmi:dtdl:extension:overriding:v1:Override:overrides"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate5ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:quantitativeTypes;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("Acceleration", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Acceleration"), isMergeableType: false);
            context1_0.AddTermDefinition("AccelerationUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:AccelerationUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("acre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:acre"), isMergeableType: false);
            context1_0.AddTermDefinition("ampere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:ampere"), isMergeableType: false);
            context1_0.AddTermDefinition("ampereHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:ampereHour"), isMergeableType: false);
            context1_0.AddTermDefinition("Angle", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Angle"), isMergeableType: false);
            context1_0.AddTermDefinition("AngleUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:AngleUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("AngularAcceleration", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:AngularAcceleration"), isMergeableType: false);
            context1_0.AddTermDefinition("AngularAccelerationUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:AngularAccelerationUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("AngularVelocity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:AngularVelocity"), isMergeableType: false);
            context1_0.AddTermDefinition("AngularVelocityUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:AngularVelocityUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("ApparentEnergy", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:ApparentEnergy"), isMergeableType: false);
            context1_0.AddTermDefinition("ApparentEnergyUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ApparentEnergyUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("ApparentPower", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:ApparentPower"), isMergeableType: false);
            context1_0.AddTermDefinition("ApparentPowerUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ApparentPowerUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Area", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Area"), isMergeableType: false);
            context1_0.AddTermDefinition("AreaUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:AreaUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("astronomicalUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:astronomicalUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("atto", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:atto"), isMergeableType: false);
            context1_0.AddTermDefinition("bar", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:bar"), isMergeableType: false);
            context1_0.AddTermDefinition("baseUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:property:baseUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("becquerel", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:becquerel"), isMergeableType: false);
            context1_0.AddTermDefinition("bel", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:bel"), isMergeableType: false);
            context1_0.AddTermDefinition("BinaryPrefix", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:BinaryPrefix"), isMergeableType: false);
            context1_0.AddTermDefinition("BinaryUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:BinaryUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("bit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:bit"), isMergeableType: false);
            context1_0.AddTermDefinition("bitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:bitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("bottomUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:property:bottomUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("britishThermalUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:britishThermalUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("britishThermalUnitPerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:britishThermalUnitPerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("byte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:byte"), isMergeableType: false);
            context1_0.AddTermDefinition("bytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:bytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("candela", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:candela"), isMergeableType: false);
            context1_0.AddTermDefinition("candelaPerSquareMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:candelaPerSquareMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("Capacitance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Capacitance"), isMergeableType: false);
            context1_0.AddTermDefinition("CapacitanceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:CapacitanceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("centi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:centi"), isMergeableType: false);
            context1_0.AddTermDefinition("centimetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:centimetre"), isMergeableType: false);
            context1_0.AddTermDefinition("centimetrePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:centimetrePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("centimetrePerSecondSquared", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:centimetrePerSecondSquared"), isMergeableType: false);
            context1_0.AddTermDefinition("ChargeUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ChargeUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Concentration", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Concentration"), isMergeableType: false);
            context1_0.AddTermDefinition("coulomb", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:coulomb"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicCentimetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicCentimetre"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicFoot", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicFoot"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicFootPerMinute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicFootPerMinute"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicInch", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicInch"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicMetrePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicMetrePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicMetrePerMinute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicMetrePerMinute"), isMergeableType: false);
            context1_0.AddTermDefinition("cubicMetrePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:cubicMetrePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("Current", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Current"), isMergeableType: false);
            context1_0.AddTermDefinition("CurrentUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:CurrentUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("DataRate", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:DataRate"), isMergeableType: false);
            context1_0.AddTermDefinition("DataRateUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:DataRateUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("DataSize", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:DataSize"), isMergeableType: false);
            context1_0.AddTermDefinition("DataSizeUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:DataSizeUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("day", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:day"), isMergeableType: false);
            context1_0.AddTermDefinition("deca", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:deca"), isMergeableType: false);
            context1_0.AddTermDefinition("decapascal", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:decapascal"), isMergeableType: false);
            context1_0.AddTermDefinition("deci", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:deci"), isMergeableType: false);
            context1_0.AddTermDefinition("decibel", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:decibel"), isMergeableType: false);
            context1_0.AddTermDefinition("DecimalPrefix", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:DecimalPrefix"), isMergeableType: false);
            context1_0.AddTermDefinition("DecimalUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:DecimalUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("degreeCelsius", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:degreeCelsius"), isMergeableType: false);
            context1_0.AddTermDefinition("degreeFahrenheit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:degreeFahrenheit"), isMergeableType: false);
            context1_0.AddTermDefinition("degreeOfArc", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:degreeOfArc"), isMergeableType: false);
            context1_0.AddTermDefinition("degreePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:degreePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("Density", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Density"), isMergeableType: false);
            context1_0.AddTermDefinition("DensityUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:DensityUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Distance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Distance"), isMergeableType: false);
            context1_0.AddTermDefinition("ElectricCharge", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:ElectricCharge"), isMergeableType: false);
            context1_0.AddTermDefinition("electronvolt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:electronvolt"), isMergeableType: false);
            context1_0.AddTermDefinition("Energy", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Energy"), isMergeableType: false);
            context1_0.AddTermDefinition("EnergyRate", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:EnergyRate"), isMergeableType: false);
            context1_0.AddTermDefinition("EnergyUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:EnergyUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("exa", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:exa"), isMergeableType: false);
            context1_0.AddTermDefinition("exbi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:exbi"), isMergeableType: false);
            context1_0.AddTermDefinition("exbibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:exbibit"), isMergeableType: false);
            context1_0.AddTermDefinition("exbibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:exbibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("exbibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:exbibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("exbibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:exbibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("farad", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:farad"), isMergeableType: false);
            context1_0.AddTermDefinition("femto", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:femto"), isMergeableType: false);
            context1_0.AddTermDefinition("fluidOunce", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:fluidOunce"), isMergeableType: false);
            context1_0.AddTermDefinition("foot", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:foot"), isMergeableType: false);
            context1_0.AddTermDefinition("footcandle", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:footcandle"), isMergeableType: false);
            context1_0.AddTermDefinition("Force", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Force"), isMergeableType: false);
            context1_0.AddTermDefinition("ForceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ForceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Frequency", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Frequency"), isMergeableType: false);
            context1_0.AddTermDefinition("FrequencyUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:FrequencyUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("gallon", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gallon"), isMergeableType: false);
            context1_0.AddTermDefinition("gallonPerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gallonPerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("gallonPerMinute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gallonPerMinute"), isMergeableType: false);
            context1_0.AddTermDefinition("gauss", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gauss"), isMergeableType: false);
            context1_0.AddTermDefinition("gForce", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gForce"), isMergeableType: false);
            context1_0.AddTermDefinition("gibi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:gibi"), isMergeableType: false);
            context1_0.AddTermDefinition("gibibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gibibit"), isMergeableType: false);
            context1_0.AddTermDefinition("gibibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gibibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("gibibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gibibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("gibibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gibibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("giga", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:giga"), isMergeableType: false);
            context1_0.AddTermDefinition("gigabecquerel", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigabecquerel"), isMergeableType: false);
            context1_0.AddTermDefinition("gigahertz", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigahertz"), isMergeableType: false);
            context1_0.AddTermDefinition("gigajoule", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigajoule"), isMergeableType: false);
            context1_0.AddTermDefinition("gigajoulePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigajoulePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("gigavoltAmpere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigavoltAmpere"), isMergeableType: false);
            context1_0.AddTermDefinition("gigavoltAmpereHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigavoltAmpereHour"), isMergeableType: false);
            context1_0.AddTermDefinition("gigavoltAmpereReactive", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigavoltAmpereReactive"), isMergeableType: false);
            context1_0.AddTermDefinition("gigavoltAmpereReactiveHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigavoltAmpereReactiveHour"), isMergeableType: false);
            context1_0.AddTermDefinition("gigawatt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigawatt"), isMergeableType: false);
            context1_0.AddTermDefinition("gigawattHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gigawattHour"), isMergeableType: false);
            context1_0.AddTermDefinition("gram", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gram"), isMergeableType: false);
            context1_0.AddTermDefinition("gramPerCubicMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gramPerCubicMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("gramPerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gramPerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("gramPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gramPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("gray", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:gray"), isMergeableType: false);
            context1_0.AddTermDefinition("hectare", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:hectare"), isMergeableType: false);
            context1_0.AddTermDefinition("hecto", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:hecto"), isMergeableType: false);
            context1_0.AddTermDefinition("hectopascal", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:hectopascal"), isMergeableType: false);
            context1_0.AddTermDefinition("henry", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:henry"), isMergeableType: false);
            context1_0.AddTermDefinition("hertz", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:hertz"), isMergeableType: false);
            context1_0.AddTermDefinition("horsepower", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:horsepower"), isMergeableType: false);
            context1_0.AddTermDefinition("hour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:hour"), isMergeableType: false);
            context1_0.AddTermDefinition("Humidity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Humidity"), isMergeableType: false);
            context1_0.AddTermDefinition("Illuminance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Illuminance"), isMergeableType: false);
            context1_0.AddTermDefinition("IlluminanceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:IlluminanceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("inch", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:inch"), isMergeableType: false);
            context1_0.AddTermDefinition("inchesOfMercury", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:inchesOfMercury"), isMergeableType: false);
            context1_0.AddTermDefinition("inchesOfWater", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:inchesOfWater"), isMergeableType: false);
            context1_0.AddTermDefinition("Inductance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Inductance"), isMergeableType: false);
            context1_0.AddTermDefinition("InductanceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:InductanceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("IonizingRadiationDose", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:IonizingRadiationDose"), isMergeableType: false);
            context1_0.AddTermDefinition("IonizingRadiationDoseUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:IonizingRadiationDoseUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Irradiance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Irradiance"), isMergeableType: false);
            context1_0.AddTermDefinition("IrradianceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:IrradianceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("joule", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:joule"), isMergeableType: false);
            context1_0.AddTermDefinition("joulePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:joulePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("joulePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:joulePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("kelvin", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kelvin"), isMergeableType: false);
            context1_0.AddTermDefinition("kibi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:kibi"), isMergeableType: false);
            context1_0.AddTermDefinition("kibibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kibibit"), isMergeableType: false);
            context1_0.AddTermDefinition("kibibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kibibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("kibibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kibibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("kibibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kibibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("kilo", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:kilo"), isMergeableType: false);
            context1_0.AddTermDefinition("kiloampere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kiloampere"), isMergeableType: false);
            context1_0.AddTermDefinition("kilobecquerel", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilobecquerel"), isMergeableType: false);
            context1_0.AddTermDefinition("kiloBritishThermalUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kiloBritishThermalUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("kiloBritishThermalUnitPerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kiloBritishThermalUnitPerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilogram", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilogram"), isMergeableType: false);
            context1_0.AddTermDefinition("kilogramPerCubicMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilogramPerCubicMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("kilogramPerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilogramPerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilogramPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilogramPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("kilohertz", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilohertz"), isMergeableType: false);
            context1_0.AddTermDefinition("kilojoule", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilojoule"), isMergeableType: false);
            context1_0.AddTermDefinition("kilojoulePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilojoulePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilojoulePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilojoulePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("kilometre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilometre"), isMergeableType: false);
            context1_0.AddTermDefinition("kilometrePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilometrePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilometrePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilometrePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("kiloohm", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kiloohm"), isMergeableType: false);
            context1_0.AddTermDefinition("kilopascal", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilopascal"), isMergeableType: false);
            context1_0.AddTermDefinition("kilovolt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilovolt"), isMergeableType: false);
            context1_0.AddTermDefinition("kilovoltAmpere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilovoltAmpere"), isMergeableType: false);
            context1_0.AddTermDefinition("kilovoltAmpereHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilovoltAmpereHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilovoltAmpereReactive", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilovoltAmpereReactive"), isMergeableType: false);
            context1_0.AddTermDefinition("kilovoltAmpereReactiveHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilovoltAmpereReactiveHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilowatt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilowatt"), isMergeableType: false);
            context1_0.AddTermDefinition("kilowattHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilowattHour"), isMergeableType: false);
            context1_0.AddTermDefinition("kilowattHourPerYear", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:kilowattHourPerYear"), isMergeableType: false);
            context1_0.AddTermDefinition("knot", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:knot"), isMergeableType: false);
            context1_0.AddTermDefinition("Latitude", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Latitude"), isMergeableType: false);
            context1_0.AddTermDefinition("Length", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Length"), isMergeableType: false);
            context1_0.AddTermDefinition("LengthUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:LengthUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("litre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:litre"), isMergeableType: false);
            context1_0.AddTermDefinition("litrePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:litrePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("litrePerMinute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:litrePerMinute"), isMergeableType: false);
            context1_0.AddTermDefinition("litrePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:litrePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("Longitude", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Longitude"), isMergeableType: false);
            context1_0.AddTermDefinition("lumen", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:lumen"), isMergeableType: false);
            context1_0.AddTermDefinition("Luminance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Luminance"), isMergeableType: false);
            context1_0.AddTermDefinition("LuminanceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:LuminanceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Luminosity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Luminosity"), isMergeableType: false);
            context1_0.AddTermDefinition("LuminousFlux", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:LuminousFlux"), isMergeableType: false);
            context1_0.AddTermDefinition("LuminousFluxUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:LuminousFluxUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("LuminousIntensity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:LuminousIntensity"), isMergeableType: false);
            context1_0.AddTermDefinition("LuminousIntensityUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:LuminousIntensityUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("lux", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:lux"), isMergeableType: false);
            context1_0.AddTermDefinition("MagneticFlux", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:MagneticFlux"), isMergeableType: false);
            context1_0.AddTermDefinition("MagneticFluxUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:MagneticFluxUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("MagneticInduction", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:MagneticInduction"), isMergeableType: false);
            context1_0.AddTermDefinition("MagneticInductionUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:MagneticInductionUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Mass", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Mass"), isMergeableType: false);
            context1_0.AddTermDefinition("MassFlowRate", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:MassFlowRate"), isMergeableType: false);
            context1_0.AddTermDefinition("MassFlowRateUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:MassFlowRateUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("massPound", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:massPound"), isMergeableType: false);
            context1_0.AddTermDefinition("massPoundPerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:massPoundPerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("MassUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:MassUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("maxwell", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:maxwell"), isMergeableType: false);
            context1_0.AddTermDefinition("mebi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:mebi"), isMergeableType: false);
            context1_0.AddTermDefinition("mebibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:mebibit"), isMergeableType: false);
            context1_0.AddTermDefinition("mebibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:mebibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("mebibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:mebibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("mebibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:mebibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("mega", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:mega"), isMergeableType: false);
            context1_0.AddTermDefinition("megabecquerel", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megabecquerel"), isMergeableType: false);
            context1_0.AddTermDefinition("megaelectronvolt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megaelectronvolt"), isMergeableType: false);
            context1_0.AddTermDefinition("megahertz", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megahertz"), isMergeableType: false);
            context1_0.AddTermDefinition("megajoule", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megajoule"), isMergeableType: false);
            context1_0.AddTermDefinition("megajoulePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megajoulePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("megaohm", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megaohm"), isMergeableType: false);
            context1_0.AddTermDefinition("megavolt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megavolt"), isMergeableType: false);
            context1_0.AddTermDefinition("megavoltAmpere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megavoltAmpere"), isMergeableType: false);
            context1_0.AddTermDefinition("megavoltAmpereHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megavoltAmpereHour"), isMergeableType: false);
            context1_0.AddTermDefinition("megavoltAmpereReactive", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megavoltAmpereReactive"), isMergeableType: false);
            context1_0.AddTermDefinition("megavoltAmpereReactiveHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megavoltAmpereReactiveHour"), isMergeableType: false);
            context1_0.AddTermDefinition("megawatt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megawatt"), isMergeableType: false);
            context1_0.AddTermDefinition("megawattHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:megawattHour"), isMergeableType: false);
            context1_0.AddTermDefinition("metre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:metre"), isMergeableType: false);
            context1_0.AddTermDefinition("metrePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:metrePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("metrePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:metrePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("metrePerSecondSquared", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:metrePerSecondSquared"), isMergeableType: false);
            context1_0.AddTermDefinition("micro", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:micro"), isMergeableType: false);
            context1_0.AddTermDefinition("microampere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microampere"), isMergeableType: false);
            context1_0.AddTermDefinition("microfarad", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microfarad"), isMergeableType: false);
            context1_0.AddTermDefinition("microgram", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microgram"), isMergeableType: false);
            context1_0.AddTermDefinition("microgramPerCubicMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microgramPerCubicMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("microgray", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microgray"), isMergeableType: false);
            context1_0.AddTermDefinition("microhenry", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microhenry"), isMergeableType: false);
            context1_0.AddTermDefinition("micrometre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:micrometre"), isMergeableType: false);
            context1_0.AddTermDefinition("microsecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microsecond"), isMergeableType: false);
            context1_0.AddTermDefinition("microsievert", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microsievert"), isMergeableType: false);
            context1_0.AddTermDefinition("microvolt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microvolt"), isMergeableType: false);
            context1_0.AddTermDefinition("microwatt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:microwatt"), isMergeableType: false);
            context1_0.AddTermDefinition("mile", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:mile"), isMergeableType: false);
            context1_0.AddTermDefinition("milePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("milePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("milli", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:milli"), isMergeableType: false);
            context1_0.AddTermDefinition("milliampere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milliampere"), isMergeableType: false);
            context1_0.AddTermDefinition("milliampereHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milliampereHour"), isMergeableType: false);
            context1_0.AddTermDefinition("millibar", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millibar"), isMergeableType: false);
            context1_0.AddTermDefinition("millifarad", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millifarad"), isMergeableType: false);
            context1_0.AddTermDefinition("milligram", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milligram"), isMergeableType: false);
            context1_0.AddTermDefinition("milligramPerCubicMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milligramPerCubicMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("milligray", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milligray"), isMergeableType: false);
            context1_0.AddTermDefinition("millihenry", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millihenry"), isMergeableType: false);
            context1_0.AddTermDefinition("millihertz", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millihertz"), isMergeableType: false);
            context1_0.AddTermDefinition("millilitre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millilitre"), isMergeableType: false);
            context1_0.AddTermDefinition("millilitrePerHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millilitrePerHour"), isMergeableType: false);
            context1_0.AddTermDefinition("millilitrePerMinute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millilitrePerMinute"), isMergeableType: false);
            context1_0.AddTermDefinition("millilitrePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millilitrePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("millimetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millimetre"), isMergeableType: false);
            context1_0.AddTermDefinition("millimetresOfMercury", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millimetresOfMercury"), isMergeableType: false);
            context1_0.AddTermDefinition("milliohm", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milliohm"), isMergeableType: false);
            context1_0.AddTermDefinition("millisecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millisecond"), isMergeableType: false);
            context1_0.AddTermDefinition("millisievert", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millisievert"), isMergeableType: false);
            context1_0.AddTermDefinition("millivolt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millivolt"), isMergeableType: false);
            context1_0.AddTermDefinition("millivoltAmpere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millivoltAmpere"), isMergeableType: false);
            context1_0.AddTermDefinition("millivoltAmpereReactive", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:millivoltAmpereReactive"), isMergeableType: false);
            context1_0.AddTermDefinition("milliwatt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milliwatt"), isMergeableType: false);
            context1_0.AddTermDefinition("milliwattHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:milliwattHour"), isMergeableType: false);
            context1_0.AddTermDefinition("minute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:minute"), isMergeableType: false);
            context1_0.AddTermDefinition("minuteOfArc", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:minuteOfArc"), isMergeableType: false);
            context1_0.AddTermDefinition("nano", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:nano"), isMergeableType: false);
            context1_0.AddTermDefinition("nanofarad", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:nanofarad"), isMergeableType: false);
            context1_0.AddTermDefinition("nanometre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:nanometre"), isMergeableType: false);
            context1_0.AddTermDefinition("nanosecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:nanosecond"), isMergeableType: false);
            context1_0.AddTermDefinition("nauticalMile", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:nauticalMile"), isMergeableType: false);
            context1_0.AddTermDefinition("newton", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:newton"), isMergeableType: false);
            context1_0.AddTermDefinition("newtonMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:newtonMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("ohm", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:ohm"), isMergeableType: false);
            context1_0.AddTermDefinition("ounce", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:ounce"), isMergeableType: false);
            context1_0.AddTermDefinition("partsPerBillion", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:partsPerBillion"), isMergeableType: false);
            context1_0.AddTermDefinition("partsPerMillion", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:partsPerMillion"), isMergeableType: false);
            context1_0.AddTermDefinition("partsPerQuadrillion", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:partsPerQuadrillion"), isMergeableType: false);
            context1_0.AddTermDefinition("partsPerTrillion", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:partsPerTrillion"), isMergeableType: false);
            context1_0.AddTermDefinition("pascal", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:pascal"), isMergeableType: false);
            context1_0.AddTermDefinition("pebi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:pebi"), isMergeableType: false);
            context1_0.AddTermDefinition("percent", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:percent"), isMergeableType: false);
            context1_0.AddTermDefinition("peta", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:peta"), isMergeableType: false);
            context1_0.AddTermDefinition("pico", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:pico"), isMergeableType: false);
            context1_0.AddTermDefinition("picofarad", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:picofarad"), isMergeableType: false);
            context1_0.AddTermDefinition("pound", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:pound"), isMergeableType: false);
            context1_0.AddTermDefinition("poundPerSquareInch", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:poundPerSquareInch"), isMergeableType: false);
            context1_0.AddTermDefinition("Power", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Power"), isMergeableType: false);
            context1_0.AddTermDefinition("PowerUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:PowerUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("prefix", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:property:prefix"), isMergeableType: false);
            context1_0.AddTermDefinition("Pressure", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Pressure"), isMergeableType: false);
            context1_0.AddTermDefinition("PressureUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:PressureUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("QuantitativeType", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:QuantitativeType"), isMergeableType: false);
            context1_0.AddTermDefinition("radian", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:radian"), isMergeableType: false);
            context1_0.AddTermDefinition("radianPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:radianPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("radianPerSecondSquared", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:radianPerSecondSquared"), isMergeableType: false);
            context1_0.AddTermDefinition("Radioactivity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Radioactivity"), isMergeableType: false);
            context1_0.AddTermDefinition("RadioactivityUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:RadioactivityUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("RatioUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:RatioUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("ReactiveEnergy", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:ReactiveEnergy"), isMergeableType: false);
            context1_0.AddTermDefinition("ReactiveEnergyUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ReactiveEnergyUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("ReactivePower", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:ReactivePower"), isMergeableType: false);
            context1_0.AddTermDefinition("ReactivePowerUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ReactivePowerUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("RelativeDensity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:RelativeDensity"), isMergeableType: false);
            context1_0.AddTermDefinition("RelativeHumidity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:RelativeHumidity"), isMergeableType: false);
            context1_0.AddTermDefinition("Resistance", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Resistance"), isMergeableType: false);
            context1_0.AddTermDefinition("ResistanceUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:ResistanceUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("revolutionPerMinute", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:revolutionPerMinute"), isMergeableType: false);
            context1_0.AddTermDefinition("revolutionPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:revolutionPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("second", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:second"), isMergeableType: false);
            context1_0.AddTermDefinition("secondOfArc", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:secondOfArc"), isMergeableType: false);
            context1_0.AddTermDefinition("sievert", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:sievert"), isMergeableType: false);
            context1_0.AddTermDefinition("slug", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:slug"), isMergeableType: false);
            context1_0.AddTermDefinition("SoundPressure", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:SoundPressure"), isMergeableType: false);
            context1_0.AddTermDefinition("SoundPressureUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:SoundPressureUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("squareCentimetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:squareCentimetre"), isMergeableType: false);
            context1_0.AddTermDefinition("squareFoot", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:squareFoot"), isMergeableType: false);
            context1_0.AddTermDefinition("squareInch", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:squareInch"), isMergeableType: false);
            context1_0.AddTermDefinition("squareKilometre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:squareKilometre"), isMergeableType: false);
            context1_0.AddTermDefinition("squareMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:squareMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("squareMillimetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:squareMillimetre"), isMergeableType: false);
            context1_0.AddTermDefinition("SymbolicUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:SymbolicUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("tebi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:tebi"), isMergeableType: false);
            context1_0.AddTermDefinition("tebibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tebibit"), isMergeableType: false);
            context1_0.AddTermDefinition("tebibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tebibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("tebibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tebibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("tebibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tebibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("Temperature", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Temperature"), isMergeableType: false);
            context1_0.AddTermDefinition("TemperatureUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:TemperatureUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("tera", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:tera"), isMergeableType: false);
            context1_0.AddTermDefinition("terawattHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:terawattHour"), isMergeableType: false);
            context1_0.AddTermDefinition("tesla", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tesla"), isMergeableType: false);
            context1_0.AddTermDefinition("Thrust", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Thrust"), isMergeableType: false);
            context1_0.AddTermDefinition("TimeSpan", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:TimeSpan"), isMergeableType: false);
            context1_0.AddTermDefinition("TimeUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:TimeUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("ton", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:ton"), isMergeableType: false);
            context1_0.AddTermDefinition("tonne", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tonne"), isMergeableType: false);
            context1_0.AddTermDefinition("tonOfRefrigeration", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:tonOfRefrigeration"), isMergeableType: false);
            context1_0.AddTermDefinition("topUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:property:topUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("Torque", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Torque"), isMergeableType: false);
            context1_0.AddTermDefinition("TorqueUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:TorqueUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("turn", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:turn"), isMergeableType: false);
            context1_0.AddTermDefinition("unit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:property:unit"), isMergeableType: false);
            context1_0.AddTermDefinition("Unitless", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:Unitless"), isMergeableType: false);
            context1_0.AddTermDefinition("UnitPrefix", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:UnitPrefix"), isMergeableType: false);
            context1_0.AddTermDefinition("unity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:unity"), isMergeableType: false);
            context1_0.AddTermDefinition("Velocity", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Velocity"), isMergeableType: false);
            context1_0.AddTermDefinition("VelocityUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:VelocityUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("volt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:volt"), isMergeableType: false);
            context1_0.AddTermDefinition("Voltage", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Voltage"), isMergeableType: false);
            context1_0.AddTermDefinition("VoltageUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:VoltageUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("voltAmpere", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:voltAmpere"), isMergeableType: false);
            context1_0.AddTermDefinition("voltAmpereHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:voltAmpereHour"), isMergeableType: false);
            context1_0.AddTermDefinition("voltAmpereReactive", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:voltAmpereReactive"), isMergeableType: false);
            context1_0.AddTermDefinition("voltAmpereReactiveHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:voltAmpereReactiveHour"), isMergeableType: false);
            context1_0.AddTermDefinition("Volume", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:Volume"), isMergeableType: false);
            context1_0.AddTermDefinition("VolumeFlowRate", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:class:VolumeFlowRate"), isMergeableType: false);
            context1_0.AddTermDefinition("VolumeFlowRateUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:VolumeFlowRateUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("VolumeUnit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:enum:VolumeUnit"), isMergeableType: false);
            context1_0.AddTermDefinition("watt", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:watt"), isMergeableType: false);
            context1_0.AddTermDefinition("wattHour", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:wattHour"), isMergeableType: false);
            context1_0.AddTermDefinition("wattPerSquareMetre", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:wattPerSquareMetre"), isMergeableType: false);
            context1_0.AddTermDefinition("weber", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:weber"), isMergeableType: false);
            context1_0.AddTermDefinition("year", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:year"), isMergeableType: false);
            context1_0.AddTermDefinition("yobi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:yobi"), isMergeableType: false);
            context1_0.AddTermDefinition("yobibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:yobibit"), isMergeableType: false);
            context1_0.AddTermDefinition("yobibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:yobibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("yobibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:yobibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("yobibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:yobibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("yocto", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:yocto"), isMergeableType: false);
            context1_0.AddTermDefinition("yotta", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:yotta"), isMergeableType: false);
            context1_0.AddTermDefinition("zebi", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:zebi"), isMergeableType: false);
            context1_0.AddTermDefinition("zebibit", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:zebibit"), isMergeableType: false);
            context1_0.AddTermDefinition("zebibitPerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:zebibitPerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("zebibyte", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:zebibyte"), isMergeableType: false);
            context1_0.AddTermDefinition("zebibytePerSecond", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unit:zebibytePerSecond"), isMergeableType: false);
            context1_0.AddTermDefinition("zepto", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:zepto"), isMergeableType: false);
            context1_0.AddTermDefinition("zetta", new Dtmi("dtmi:dtdl:extension:quantitativeTypes:v1:unitprefix:zetta"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate6ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context1_0 = new VersionedContext("dtmi:dtdl:extension:streaming;1", 1, 0, mergeDefinitions: false);
            context1_0.AddTermDefinition("Streaming", new Dtmi("dtmi:dtdl:extension:streaming:v1:Streaming"), isMergeableType: false);
            versionedContexts.Add(context1_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetAffiliate7ContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context2_0 = new VersionedContext("dtmi:iotcentral:context;2", 2, 0, mergeDefinitions: false);
            context2_0.ReserveIdDefinitionPrefix("dtmi:iotcentral:");
            context2_0.AddTermDefinition("AccelerationVector", new Dtmi("dtmi:iotcentral:class:AccelerationVector;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Event", new Dtmi("dtmi:iotcentral:class:Event;2"), isMergeableType: false);
            context2_0.AddTermDefinition("geopoint", new Dtmi("dtmi:iotcentral:schema:geopoint;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Location", new Dtmi("dtmi:iotcentral:class:Location;2"), isMergeableType: false);
            context2_0.AddTermDefinition("State", new Dtmi("dtmi:iotcentral:class:State;2"), isMergeableType: false);
            context2_0.AddTermDefinition("vector", new Dtmi("dtmi:iotcentral:schema:vector;2"), isMergeableType: false);
            context2_0.AddTermDefinition("VelocityVector", new Dtmi("dtmi:iotcentral:class:VelocityVector;2"), isMergeableType: false);
            versionedContexts.Add(context2_0);

            return new ContextHistory(versionedContexts);
        }

        private static ContextHistory GetDtdlContextHistory()
        {
            List<VersionedContext> versionedContexts = new List<VersionedContext>();

            VersionedContext context2_0 = new VersionedContext("dtmi:dtdl:context;2", 2, 0, mergeDefinitions: false);
            context2_0.ReserveIdDefinitionPrefix("dtmi:dtdl:");
            context2_0.ReserveIdDefinitionPrefix("dtmi:standard:");
            context2_0.AddTermDefinition("Acceleration", new Dtmi("dtmi:standard:class:Acceleration;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AccelerationUnit", new Dtmi("dtmi:standard:class:AccelerationUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("acre", new Dtmi("dtmi:standard:unit:acre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ampere", new Dtmi("dtmi:standard:unit:ampere;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Angle", new Dtmi("dtmi:standard:class:Angle;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AngleUnit", new Dtmi("dtmi:standard:class:AngleUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AngularAcceleration", new Dtmi("dtmi:standard:class:AngularAcceleration;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AngularAccelerationUnit", new Dtmi("dtmi:standard:class:AngularAccelerationUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AngularVelocity", new Dtmi("dtmi:standard:class:AngularVelocity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AngularVelocityUnit", new Dtmi("dtmi:standard:class:AngularVelocityUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Area", new Dtmi("dtmi:standard:class:Area;2"), isMergeableType: false);
            context2_0.AddTermDefinition("AreaUnit", new Dtmi("dtmi:standard:class:AreaUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Array", new Dtmi("dtmi:dtdl:class:Array;2"), isMergeableType: false);
            context2_0.AddTermDefinition("astronomicalUnit", new Dtmi("dtmi:standard:unit:astronomicalUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("asynchronous", new Dtmi("dtmi:dtdl:instance:CommandType:asynchronous;2"), isMergeableType: false);
            context2_0.AddTermDefinition("atto", new Dtmi("dtmi:standard:unitprefix:atto;2"), isMergeableType: false);
            context2_0.AddTermDefinition("bar", new Dtmi("dtmi:standard:unit:bar;2"), isMergeableType: false);
            context2_0.AddTermDefinition("baseUnit", new Dtmi("dtmi:dtdl:property:baseUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("bel", new Dtmi("dtmi:standard:unit:bel;2"), isMergeableType: false);
            context2_0.AddTermDefinition("BinaryPrefix", new Dtmi("dtmi:standard:class:BinaryPrefix;2"), isMergeableType: false);
            context2_0.AddTermDefinition("BinaryUnit", new Dtmi("dtmi:standard:class:BinaryUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("bit", new Dtmi("dtmi:standard:unit:bit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("bitPerSecond", new Dtmi("dtmi:standard:unit:bitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("boolean", new Dtmi("dtmi:dtdl:instance:Schema:boolean;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Boolean", new Dtmi("dtmi:dtdl:class:Boolean;2"), isMergeableType: false);
            context2_0.AddTermDefinition("bottomUnit", new Dtmi("dtmi:dtdl:property:bottomUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("byte", new Dtmi("dtmi:standard:unit:byte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("bytePerSecond", new Dtmi("dtmi:standard:unit:bytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("candela", new Dtmi("dtmi:standard:unit:candela;2"), isMergeableType: false);
            context2_0.AddTermDefinition("candelaPerSquareMetre", new Dtmi("dtmi:standard:unit:candelaPerSquareMetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Capacitance", new Dtmi("dtmi:standard:class:Capacitance;2"), isMergeableType: false);
            context2_0.AddTermDefinition("CapacitanceUnit", new Dtmi("dtmi:standard:class:CapacitanceUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("centi", new Dtmi("dtmi:standard:unitprefix:centi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("centimetre", new Dtmi("dtmi:standard:unit:centimetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("centimetrePerSecond", new Dtmi("dtmi:standard:unit:centimetrePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("centimetrePerSecondSquared", new Dtmi("dtmi:standard:unit:centimetrePerSecondSquared;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ChargeUnit", new Dtmi("dtmi:standard:class:ChargeUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Command", new Dtmi("dtmi:dtdl:class:Command;2"), isMergeableType: false);
            context2_0.AddTermDefinition("CommandPayload", new Dtmi("dtmi:dtdl:class:CommandPayload;2"), isMergeableType: false);
            context2_0.AddTermDefinition("commandType", new Dtmi("dtmi:dtdl:property:commandType;2"), isMergeableType: false);
            context2_0.AddTermDefinition("CommandType", new Dtmi("dtmi:dtdl:class:CommandType;2"), isMergeableType: false);
            context2_0.AddTermDefinition("comment", new Dtmi("dtmi:dtdl:property:comment;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ComplexSchema", new Dtmi("dtmi:dtdl:class:ComplexSchema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Component", new Dtmi("dtmi:dtdl:class:Component;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Content", new Dtmi("dtmi:dtdl:class:Content;2"), isMergeableType: false);
            context2_0.AddTermDefinition("contents", new Dtmi("dtmi:dtdl:property:contents;2"), isMergeableType: false);
            context2_0.AddTermDefinition("coulomb", new Dtmi("dtmi:standard:unit:coulomb;2"), isMergeableType: false);
            context2_0.AddTermDefinition("cubicCentimetre", new Dtmi("dtmi:standard:unit:cubicCentimetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("cubicFoot", new Dtmi("dtmi:standard:unit:cubicFoot;2"), isMergeableType: false);
            context2_0.AddTermDefinition("cubicInch", new Dtmi("dtmi:standard:unit:cubicInch;2"), isMergeableType: false);
            context2_0.AddTermDefinition("cubicMetre", new Dtmi("dtmi:standard:unit:cubicMetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Current", new Dtmi("dtmi:standard:class:Current;2"), isMergeableType: false);
            context2_0.AddTermDefinition("CurrentUnit", new Dtmi("dtmi:standard:class:CurrentUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DataRate", new Dtmi("dtmi:standard:class:DataRate;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DataRateUnit", new Dtmi("dtmi:standard:class:DataRateUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DataSize", new Dtmi("dtmi:standard:class:DataSize;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DataSizeUnit", new Dtmi("dtmi:standard:class:DataSizeUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("date", new Dtmi("dtmi:dtdl:instance:Schema:date;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Date", new Dtmi("dtmi:dtdl:class:Date;2"), isMergeableType: false);
            context2_0.AddTermDefinition("dateTime", new Dtmi("dtmi:dtdl:instance:Schema:dateTime;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DateTime", new Dtmi("dtmi:dtdl:class:DateTime;2"), isMergeableType: false);
            context2_0.AddTermDefinition("day", new Dtmi("dtmi:standard:unit:day;2"), isMergeableType: false);
            context2_0.AddTermDefinition("deci", new Dtmi("dtmi:standard:unitprefix:deci;2"), isMergeableType: false);
            context2_0.AddTermDefinition("decibel", new Dtmi("dtmi:standard:unit:decibel;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DecimalPrefix", new Dtmi("dtmi:standard:class:DecimalPrefix;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DecimalUnit", new Dtmi("dtmi:standard:class:DecimalUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("degreeCelsius", new Dtmi("dtmi:standard:unit:degreeCelsius;2"), isMergeableType: false);
            context2_0.AddTermDefinition("degreeFahrenheit", new Dtmi("dtmi:standard:unit:degreeFahrenheit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("degreeOfArc", new Dtmi("dtmi:standard:unit:degreeOfArc;2"), isMergeableType: false);
            context2_0.AddTermDefinition("degreePerSecond", new Dtmi("dtmi:standard:unit:degreePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("deka", new Dtmi("dtmi:standard:unitprefix:deka;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Density", new Dtmi("dtmi:standard:class:Density;2"), isMergeableType: false);
            context2_0.AddTermDefinition("DensityUnit", new Dtmi("dtmi:standard:class:DensityUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("description", new Dtmi("dtmi:dtdl:property:description;2"), isMergeableType: false);
            context2_0.AddTermDefinition("displayName", new Dtmi("dtmi:dtdl:property:displayName;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Distance", new Dtmi("dtmi:standard:class:Distance;2"), isMergeableType: false);
            context2_0.AddTermDefinition("double", new Dtmi("dtmi:dtdl:instance:Schema:double;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Double", new Dtmi("dtmi:dtdl:class:Double;2"), isMergeableType: false);
            context2_0.AddTermDefinition("duration", new Dtmi("dtmi:dtdl:instance:Schema:duration;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Duration", new Dtmi("dtmi:dtdl:class:Duration;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ElectricCharge", new Dtmi("dtmi:standard:class:ElectricCharge;2"), isMergeableType: false);
            context2_0.AddTermDefinition("electronvolt", new Dtmi("dtmi:standard:unit:electronvolt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("elementSchema", new Dtmi("dtmi:dtdl:property:elementSchema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Energy", new Dtmi("dtmi:standard:class:Energy;2"), isMergeableType: false);
            context2_0.AddTermDefinition("EnergyUnit", new Dtmi("dtmi:standard:class:EnergyUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Entity", new Dtmi("dtmi:dtdl:class:Entity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Enum", new Dtmi("dtmi:dtdl:class:Enum;2"), isMergeableType: false);
            context2_0.AddTermDefinition("enumValue", new Dtmi("dtmi:dtdl:property:enumValue;2"), isMergeableType: false);
            context2_0.AddTermDefinition("EnumValue", new Dtmi("dtmi:dtdl:class:EnumValue;2"), isMergeableType: false);
            context2_0.AddTermDefinition("enumValues", new Dtmi("dtmi:dtdl:property:enumValues;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exa", new Dtmi("dtmi:standard:unitprefix:exa;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exbi", new Dtmi("dtmi:standard:unitprefix:exbi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exbibit", new Dtmi("dtmi:standard:unit:exbibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exbibitPerSecond", new Dtmi("dtmi:standard:unit:exbibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exbibyte", new Dtmi("dtmi:standard:unit:exbibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exbibytePerSecond", new Dtmi("dtmi:standard:unit:exbibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("exponent", new Dtmi("dtmi:dtdl:property:exponent;2"), isMergeableType: false);
            context2_0.AddTermDefinition("extends", new Dtmi("dtmi:dtdl:property:extends;2"), isMergeableType: false);
            context2_0.AddTermDefinition("farad", new Dtmi("dtmi:standard:unit:farad;2"), isMergeableType: false);
            context2_0.AddTermDefinition("femto", new Dtmi("dtmi:standard:unitprefix:femto;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Field", new Dtmi("dtmi:dtdl:class:Field;2"), isMergeableType: false);
            context2_0.AddTermDefinition("fields", new Dtmi("dtmi:dtdl:property:fields;2"), isMergeableType: false);
            context2_0.AddTermDefinition("float", new Dtmi("dtmi:dtdl:instance:Schema:float;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Float", new Dtmi("dtmi:dtdl:class:Float;2"), isMergeableType: false);
            context2_0.AddTermDefinition("fluidOunce", new Dtmi("dtmi:standard:unit:fluidOunce;2"), isMergeableType: false);
            context2_0.AddTermDefinition("foot", new Dtmi("dtmi:standard:unit:foot;2"), isMergeableType: false);
            context2_0.AddTermDefinition("footcandle", new Dtmi("dtmi:standard:unit:footcandle;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Force", new Dtmi("dtmi:standard:class:Force;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ForceUnit", new Dtmi("dtmi:standard:class:ForceUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Frequency", new Dtmi("dtmi:standard:class:Frequency;2"), isMergeableType: false);
            context2_0.AddTermDefinition("FrequencyUnit", new Dtmi("dtmi:standard:class:FrequencyUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gallon", new Dtmi("dtmi:standard:unit:gallon;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gForce", new Dtmi("dtmi:standard:unit:gForce;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gibi", new Dtmi("dtmi:standard:unitprefix:gibi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gibibit", new Dtmi("dtmi:standard:unit:gibibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gibibitPerSecond", new Dtmi("dtmi:standard:unit:gibibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gibibyte", new Dtmi("dtmi:standard:unit:gibibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gibibytePerSecond", new Dtmi("dtmi:standard:unit:gibibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("giga", new Dtmi("dtmi:standard:unitprefix:giga;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gigahertz", new Dtmi("dtmi:standard:unit:gigahertz;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gigajoule", new Dtmi("dtmi:standard:unit:gigajoule;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gigawatt", new Dtmi("dtmi:standard:unit:gigawatt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gram", new Dtmi("dtmi:standard:unit:gram;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gramPerCubicMetre", new Dtmi("dtmi:standard:unit:gramPerCubicMetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gramPerHour", new Dtmi("dtmi:standard:unit:gramPerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("gramPerSecond", new Dtmi("dtmi:standard:unit:gramPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("hectare", new Dtmi("dtmi:standard:unit:hectare;2"), isMergeableType: false);
            context2_0.AddTermDefinition("hecto", new Dtmi("dtmi:standard:unitprefix:hecto;2"), isMergeableType: false);
            context2_0.AddTermDefinition("henry", new Dtmi("dtmi:standard:unit:henry;2"), isMergeableType: false);
            context2_0.AddTermDefinition("hertz", new Dtmi("dtmi:standard:unit:hertz;2"), isMergeableType: false);
            context2_0.AddTermDefinition("horsepower", new Dtmi("dtmi:standard:unit:horsepower;2"), isMergeableType: false);
            context2_0.AddTermDefinition("hour", new Dtmi("dtmi:standard:unit:hour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Humidity", new Dtmi("dtmi:standard:class:Humidity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Illuminance", new Dtmi("dtmi:standard:class:Illuminance;2"), isMergeableType: false);
            context2_0.AddTermDefinition("IlluminanceUnit", new Dtmi("dtmi:standard:class:IlluminanceUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("inch", new Dtmi("dtmi:standard:unit:inch;2"), isMergeableType: false);
            context2_0.AddTermDefinition("inchesOfMercury", new Dtmi("dtmi:standard:unit:inchesOfMercury;2"), isMergeableType: false);
            context2_0.AddTermDefinition("inchesOfWater", new Dtmi("dtmi:standard:unit:inchesOfWater;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Inductance", new Dtmi("dtmi:standard:class:Inductance;2"), isMergeableType: false);
            context2_0.AddTermDefinition("InductanceUnit", new Dtmi("dtmi:standard:class:InductanceUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("integer", new Dtmi("dtmi:dtdl:instance:Schema:integer;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Integer", new Dtmi("dtmi:dtdl:class:Integer;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Interface", new Dtmi("dtmi:dtdl:class:Interface;2"), isMergeableType: false);
            context2_0.AddTermDefinition("joule", new Dtmi("dtmi:standard:unit:joule;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kelvin", new Dtmi("dtmi:standard:unit:kelvin;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kibi", new Dtmi("dtmi:standard:unitprefix:kibi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kibibit", new Dtmi("dtmi:standard:unit:kibibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kibibitPerSecond", new Dtmi("dtmi:standard:unit:kibibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kibibyte", new Dtmi("dtmi:standard:unit:kibibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kibibytePerSecond", new Dtmi("dtmi:standard:unit:kibibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilo", new Dtmi("dtmi:standard:unitprefix:kilo;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilogram", new Dtmi("dtmi:standard:unit:kilogram;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilogramPerCubicMetre", new Dtmi("dtmi:standard:unit:kilogramPerCubicMetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilogramPerHour", new Dtmi("dtmi:standard:unit:kilogramPerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilogramPerSecond", new Dtmi("dtmi:standard:unit:kilogramPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilohertz", new Dtmi("dtmi:standard:unit:kilohertz;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilojoule", new Dtmi("dtmi:standard:unit:kilojoule;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilometre", new Dtmi("dtmi:standard:unit:kilometre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilometrePerHour", new Dtmi("dtmi:standard:unit:kilometrePerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilometrePerSecond", new Dtmi("dtmi:standard:unit:kilometrePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kiloohm", new Dtmi("dtmi:standard:unit:kiloohm;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilopascal", new Dtmi("dtmi:standard:unit:kilopascal;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilovolt", new Dtmi("dtmi:standard:unit:kilovolt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilowatt", new Dtmi("dtmi:standard:unit:kilowatt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilowattHour", new Dtmi("dtmi:standard:unit:kilowattHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("kilowattHourPerYear", new Dtmi("dtmi:standard:unit:kilowattHourPerYear;2"), isMergeableType: false);
            context2_0.AddTermDefinition("knot", new Dtmi("dtmi:standard:unit:knot;2"), isMergeableType: false);
            context2_0.AddTermDefinition("languageMajorVersion", new Dtmi("dtmi:dtdl:property:languageMajorVersion;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Latitude", new Dtmi("dtmi:standard:class:Latitude;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Length", new Dtmi("dtmi:standard:class:Length;2"), isMergeableType: false);
            context2_0.AddTermDefinition("LengthUnit", new Dtmi("dtmi:standard:class:LengthUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("lineString", new Dtmi("dtmi:standard:schema:geospatial:lineString;2"), isMergeableType: false);
            context2_0.AddTermDefinition("litre", new Dtmi("dtmi:standard:unit:litre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("litrePerHour", new Dtmi("dtmi:standard:unit:litrePerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("litrePerSecond", new Dtmi("dtmi:standard:unit:litrePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("long", new Dtmi("dtmi:dtdl:instance:Schema:long;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Long", new Dtmi("dtmi:dtdl:class:Long;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Longitude", new Dtmi("dtmi:standard:class:Longitude;2"), isMergeableType: false);
            context2_0.AddTermDefinition("lumen", new Dtmi("dtmi:standard:unit:lumen;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Luminance", new Dtmi("dtmi:standard:class:Luminance;2"), isMergeableType: false);
            context2_0.AddTermDefinition("LuminanceUnit", new Dtmi("dtmi:standard:class:LuminanceUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Luminosity", new Dtmi("dtmi:standard:class:Luminosity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("LuminousFlux", new Dtmi("dtmi:standard:class:LuminousFlux;2"), isMergeableType: false);
            context2_0.AddTermDefinition("LuminousFluxUnit", new Dtmi("dtmi:standard:class:LuminousFluxUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("LuminousIntensity", new Dtmi("dtmi:standard:class:LuminousIntensity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("LuminousIntensityUnit", new Dtmi("dtmi:standard:class:LuminousIntensityUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("lux", new Dtmi("dtmi:standard:unit:lux;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MagneticFlux", new Dtmi("dtmi:standard:class:MagneticFlux;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MagneticFluxUnit", new Dtmi("dtmi:standard:class:MagneticFluxUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MagneticInduction", new Dtmi("dtmi:standard:class:MagneticInduction;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MagneticInductionUnit", new Dtmi("dtmi:standard:class:MagneticInductionUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Map", new Dtmi("dtmi:dtdl:class:Map;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mapKey", new Dtmi("dtmi:dtdl:property:mapKey;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MapKey", new Dtmi("dtmi:dtdl:class:MapKey;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mapValue", new Dtmi("dtmi:dtdl:property:mapValue;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MapValue", new Dtmi("dtmi:dtdl:class:MapValue;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Mass", new Dtmi("dtmi:standard:class:Mass;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MassFlowRate", new Dtmi("dtmi:standard:class:MassFlowRate;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MassFlowRateUnit", new Dtmi("dtmi:standard:class:MassFlowRateUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("MassUnit", new Dtmi("dtmi:standard:class:MassUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("maxMultiplicity", new Dtmi("dtmi:dtdl:property:maxMultiplicity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("maxwell", new Dtmi("dtmi:standard:unit:maxwell;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mebi", new Dtmi("dtmi:standard:unitprefix:mebi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mebibit", new Dtmi("dtmi:standard:unit:mebibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mebibitPerSecond", new Dtmi("dtmi:standard:unit:mebibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mebibyte", new Dtmi("dtmi:standard:unit:mebibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mebibytePerSecond", new Dtmi("dtmi:standard:unit:mebibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mega", new Dtmi("dtmi:standard:unitprefix:mega;2"), isMergeableType: false);
            context2_0.AddTermDefinition("megaelectronvolt", new Dtmi("dtmi:standard:unit:megaelectronvolt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("megahertz", new Dtmi("dtmi:standard:unit:megahertz;2"), isMergeableType: false);
            context2_0.AddTermDefinition("megajoule", new Dtmi("dtmi:standard:unit:megajoule;2"), isMergeableType: false);
            context2_0.AddTermDefinition("megaohm", new Dtmi("dtmi:standard:unit:megaohm;2"), isMergeableType: false);
            context2_0.AddTermDefinition("megavolt", new Dtmi("dtmi:standard:unit:megavolt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("megawatt", new Dtmi("dtmi:standard:unit:megawatt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("metre", new Dtmi("dtmi:standard:unit:metre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("metrePerHour", new Dtmi("dtmi:standard:unit:metrePerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("metrePerSecond", new Dtmi("dtmi:standard:unit:metrePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("metrePerSecondSquared", new Dtmi("dtmi:standard:unit:metrePerSecondSquared;2"), isMergeableType: false);
            context2_0.AddTermDefinition("micro", new Dtmi("dtmi:standard:unitprefix:micro;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microampere", new Dtmi("dtmi:standard:unit:microampere;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microfarad", new Dtmi("dtmi:standard:unit:microfarad;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microgram", new Dtmi("dtmi:standard:unit:microgram;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microhenry", new Dtmi("dtmi:standard:unit:microhenry;2"), isMergeableType: false);
            context2_0.AddTermDefinition("micrometre", new Dtmi("dtmi:standard:unit:micrometre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microsecond", new Dtmi("dtmi:standard:unit:microsecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microvolt", new Dtmi("dtmi:standard:unit:microvolt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("microwatt", new Dtmi("dtmi:standard:unit:microwatt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("mile", new Dtmi("dtmi:standard:unit:mile;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milePerHour", new Dtmi("dtmi:standard:unit:milePerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milePerSecond", new Dtmi("dtmi:standard:unit:milePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milli", new Dtmi("dtmi:standard:unitprefix:milli;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milliampere", new Dtmi("dtmi:standard:unit:milliampere;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millibar", new Dtmi("dtmi:standard:unit:millibar;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millifarad", new Dtmi("dtmi:standard:unit:millifarad;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milligram", new Dtmi("dtmi:standard:unit:milligram;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millihenry", new Dtmi("dtmi:standard:unit:millihenry;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millilitre", new Dtmi("dtmi:standard:unit:millilitre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millilitrePerHour", new Dtmi("dtmi:standard:unit:millilitrePerHour;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millilitrePerSecond", new Dtmi("dtmi:standard:unit:millilitrePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millimetre", new Dtmi("dtmi:standard:unit:millimetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millimetresOfMercury", new Dtmi("dtmi:standard:unit:millimetresOfMercury;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milliohm", new Dtmi("dtmi:standard:unit:milliohm;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millisecond", new Dtmi("dtmi:standard:unit:millisecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("millivolt", new Dtmi("dtmi:standard:unit:millivolt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("milliwatt", new Dtmi("dtmi:standard:unit:milliwatt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("minMultiplicity", new Dtmi("dtmi:dtdl:property:minMultiplicity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("minute", new Dtmi("dtmi:standard:unit:minute;2"), isMergeableType: false);
            context2_0.AddTermDefinition("minuteOfArc", new Dtmi("dtmi:standard:unit:minuteOfArc;2"), isMergeableType: false);
            context2_0.AddTermDefinition("multiLineString", new Dtmi("dtmi:standard:schema:geospatial:multiLineString;2"), isMergeableType: false);
            context2_0.AddTermDefinition("multiPoint", new Dtmi("dtmi:standard:schema:geospatial:multiPoint;2"), isMergeableType: false);
            context2_0.AddTermDefinition("multiPolygon", new Dtmi("dtmi:standard:schema:geospatial:multiPolygon;2"), isMergeableType: false);
            context2_0.AddTermDefinition("name", new Dtmi("dtmi:dtdl:property:name;2"), isMergeableType: false);
            context2_0.AddTermDefinition("NamedEntity", new Dtmi("dtmi:dtdl:class:NamedEntity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("nano", new Dtmi("dtmi:standard:unitprefix:nano;2"), isMergeableType: false);
            context2_0.AddTermDefinition("nanofarad", new Dtmi("dtmi:standard:unit:nanofarad;2"), isMergeableType: false);
            context2_0.AddTermDefinition("nanometre", new Dtmi("dtmi:standard:unit:nanometre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("nanosecond", new Dtmi("dtmi:standard:unit:nanosecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("nauticalMile", new Dtmi("dtmi:standard:unit:nauticalMile;2"), isMergeableType: false);
            context2_0.AddTermDefinition("newton", new Dtmi("dtmi:standard:unit:newton;2"), isMergeableType: false);
            context2_0.AddTermDefinition("newtonMetre", new Dtmi("dtmi:standard:unit:newtonMetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("NumericSchema", new Dtmi("dtmi:dtdl:class:NumericSchema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Object", new Dtmi("dtmi:dtdl:class:Object;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ohm", new Dtmi("dtmi:standard:unit:ohm;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ounce", new Dtmi("dtmi:standard:unit:ounce;2"), isMergeableType: false);
            context2_0.AddTermDefinition("pascal", new Dtmi("dtmi:standard:unit:pascal;2"), isMergeableType: false);
            context2_0.AddTermDefinition("pebi", new Dtmi("dtmi:standard:unitprefix:pebi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("percent", new Dtmi("dtmi:standard:unit:percent;2"), isMergeableType: false);
            context2_0.AddTermDefinition("peta", new Dtmi("dtmi:standard:unitprefix:peta;2"), isMergeableType: false);
            context2_0.AddTermDefinition("pico", new Dtmi("dtmi:standard:unitprefix:pico;2"), isMergeableType: false);
            context2_0.AddTermDefinition("picofarad", new Dtmi("dtmi:standard:unit:picofarad;2"), isMergeableType: false);
            context2_0.AddTermDefinition("point", new Dtmi("dtmi:standard:schema:geospatial:point;2"), isMergeableType: false);
            context2_0.AddTermDefinition("polygon", new Dtmi("dtmi:standard:schema:geospatial:polygon;2"), isMergeableType: false);
            context2_0.AddTermDefinition("pound", new Dtmi("dtmi:standard:unit:pound;2"), isMergeableType: false);
            context2_0.AddTermDefinition("poundPerSquareInch", new Dtmi("dtmi:standard:unit:poundPerSquareInch;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Power", new Dtmi("dtmi:standard:class:Power;2"), isMergeableType: false);
            context2_0.AddTermDefinition("PowerUnit", new Dtmi("dtmi:standard:class:PowerUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("prefix", new Dtmi("dtmi:dtdl:property:prefix;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Pressure", new Dtmi("dtmi:standard:class:Pressure;2"), isMergeableType: false);
            context2_0.AddTermDefinition("PressureUnit", new Dtmi("dtmi:standard:class:PressureUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("PrimitiveSchema", new Dtmi("dtmi:dtdl:class:PrimitiveSchema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("properties", new Dtmi("dtmi:dtdl:property:properties;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Property", new Dtmi("dtmi:dtdl:class:Property;2"), isMergeableType: false);
            context2_0.AddTermDefinition("QuantitativeType", new Dtmi("dtmi:standard:class:QuantitativeType;2"), isMergeableType: false);
            context2_0.AddTermDefinition("radian", new Dtmi("dtmi:standard:unit:radian;2"), isMergeableType: false);
            context2_0.AddTermDefinition("radianPerSecond", new Dtmi("dtmi:standard:unit:radianPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("radianPerSecondSquared", new Dtmi("dtmi:standard:unit:radianPerSecondSquared;2"), isMergeableType: false);
            context2_0.AddTermDefinition("RatioUnit", new Dtmi("dtmi:standard:class:RatioUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Relationship", new Dtmi("dtmi:dtdl:class:Relationship;2"), isMergeableType: false);
            context2_0.AddTermDefinition("RelativeHumidity", new Dtmi("dtmi:standard:class:RelativeHumidity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("request", new Dtmi("dtmi:dtdl:property:request;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Resistance", new Dtmi("dtmi:standard:class:Resistance;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ResistanceUnit", new Dtmi("dtmi:standard:class:ResistanceUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("response", new Dtmi("dtmi:dtdl:property:response;2"), isMergeableType: false);
            context2_0.AddTermDefinition("revolutionPerMinute", new Dtmi("dtmi:standard:unit:revolutionPerMinute;2"), isMergeableType: false);
            context2_0.AddTermDefinition("revolutionPerSecond", new Dtmi("dtmi:standard:unit:revolutionPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("schema", new Dtmi("dtmi:dtdl:property:schema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Schema", new Dtmi("dtmi:dtdl:class:Schema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("SchemaField", new Dtmi("dtmi:dtdl:class:SchemaField;2"), isMergeableType: false);
            context2_0.AddTermDefinition("schemas", new Dtmi("dtmi:dtdl:property:schemas;2"), isMergeableType: false);
            context2_0.AddTermDefinition("second", new Dtmi("dtmi:standard:unit:second;2"), isMergeableType: false);
            context2_0.AddTermDefinition("secondOfArc", new Dtmi("dtmi:standard:unit:secondOfArc;2"), isMergeableType: false);
            context2_0.AddTermDefinition("SemanticType", new Dtmi("dtmi:dtdl:class:SemanticType;2"), isMergeableType: false);
            context2_0.AddTermDefinition("SemanticUnit", new Dtmi("dtmi:dtdl:class:SemanticUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("slug", new Dtmi("dtmi:standard:unit:slug;2"), isMergeableType: false);
            context2_0.AddTermDefinition("SoundPressure", new Dtmi("dtmi:standard:class:SoundPressure;2"), isMergeableType: false);
            context2_0.AddTermDefinition("SoundPressureUnit", new Dtmi("dtmi:standard:class:SoundPressureUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("squareCentimetre", new Dtmi("dtmi:standard:unit:squareCentimetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("squareFoot", new Dtmi("dtmi:standard:unit:squareFoot;2"), isMergeableType: false);
            context2_0.AddTermDefinition("squareInch", new Dtmi("dtmi:standard:unit:squareInch;2"), isMergeableType: false);
            context2_0.AddTermDefinition("squareKilometre", new Dtmi("dtmi:standard:unit:squareKilometre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("squareMetre", new Dtmi("dtmi:standard:unit:squareMetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("squareMillimetre", new Dtmi("dtmi:standard:unit:squareMillimetre;2"), isMergeableType: false);
            context2_0.AddTermDefinition("string", new Dtmi("dtmi:dtdl:instance:Schema:string;2"), isMergeableType: false);
            context2_0.AddTermDefinition("String", new Dtmi("dtmi:dtdl:class:String;2"), isMergeableType: false);
            context2_0.AddTermDefinition("symbol", new Dtmi("dtmi:dtdl:property:symbol;2"), isMergeableType: false);
            context2_0.AddTermDefinition("synchronous", new Dtmi("dtmi:dtdl:instance:CommandType:synchronous;2"), isMergeableType: false);
            context2_0.AddTermDefinition("target", new Dtmi("dtmi:dtdl:property:target;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tebi", new Dtmi("dtmi:standard:unitprefix:tebi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tebibit", new Dtmi("dtmi:standard:unit:tebibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tebibitPerSecond", new Dtmi("dtmi:standard:unit:tebibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tebibyte", new Dtmi("dtmi:standard:unit:tebibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tebibytePerSecond", new Dtmi("dtmi:standard:unit:tebibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Telemetry", new Dtmi("dtmi:dtdl:class:Telemetry;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Temperature", new Dtmi("dtmi:standard:class:Temperature;2"), isMergeableType: false);
            context2_0.AddTermDefinition("TemperatureUnit", new Dtmi("dtmi:standard:class:TemperatureUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("TemporalSchema", new Dtmi("dtmi:dtdl:class:TemporalSchema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tera", new Dtmi("dtmi:standard:unitprefix:tera;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tesla", new Dtmi("dtmi:standard:unit:tesla;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Thrust", new Dtmi("dtmi:standard:class:Thrust;2"), isMergeableType: false);
            context2_0.AddTermDefinition("time", new Dtmi("dtmi:dtdl:instance:Schema:time;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Time", new Dtmi("dtmi:dtdl:class:Time;2"), isMergeableType: false);
            context2_0.AddTermDefinition("TimeSpan", new Dtmi("dtmi:standard:class:TimeSpan;2"), isMergeableType: false);
            context2_0.AddTermDefinition("TimeUnit", new Dtmi("dtmi:standard:class:TimeUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("ton", new Dtmi("dtmi:standard:unit:ton;2"), isMergeableType: false);
            context2_0.AddTermDefinition("tonne", new Dtmi("dtmi:standard:unit:tonne;2"), isMergeableType: false);
            context2_0.AddTermDefinition("topUnit", new Dtmi("dtmi:dtdl:property:topUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Torque", new Dtmi("dtmi:standard:class:Torque;2"), isMergeableType: false);
            context2_0.AddTermDefinition("TorqueUnit", new Dtmi("dtmi:standard:class:TorqueUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("turn", new Dtmi("dtmi:standard:unit:turn;2"), isMergeableType: false);
            context2_0.AddTermDefinition("unit", new Dtmi("dtmi:dtdl:property:unit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Unit", new Dtmi("dtmi:dtdl:class:Unit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("UnitAttribute", new Dtmi("dtmi:dtdl:class:UnitAttribute;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Unitless", new Dtmi("dtmi:standard:class:Unitless;2"), isMergeableType: false);
            context2_0.AddTermDefinition("unity", new Dtmi("dtmi:standard:unit:unity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("valueSchema", new Dtmi("dtmi:dtdl:property:valueSchema;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Velocity", new Dtmi("dtmi:standard:class:Velocity;2"), isMergeableType: false);
            context2_0.AddTermDefinition("VelocityUnit", new Dtmi("dtmi:standard:class:VelocityUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("volt", new Dtmi("dtmi:standard:unit:volt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Voltage", new Dtmi("dtmi:standard:class:Voltage;2"), isMergeableType: false);
            context2_0.AddTermDefinition("VoltageUnit", new Dtmi("dtmi:standard:class:VoltageUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("Volume", new Dtmi("dtmi:standard:class:Volume;2"), isMergeableType: false);
            context2_0.AddTermDefinition("VolumeFlowRate", new Dtmi("dtmi:standard:class:VolumeFlowRate;2"), isMergeableType: false);
            context2_0.AddTermDefinition("VolumeFlowRateUnit", new Dtmi("dtmi:standard:class:VolumeFlowRateUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("VolumeUnit", new Dtmi("dtmi:standard:class:VolumeUnit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("watt", new Dtmi("dtmi:standard:unit:watt;2"), isMergeableType: false);
            context2_0.AddTermDefinition("weber", new Dtmi("dtmi:standard:unit:weber;2"), isMergeableType: false);
            context2_0.AddTermDefinition("writable", new Dtmi("dtmi:dtdl:property:writable;2"), isMergeableType: false);
            context2_0.AddTermDefinition("year", new Dtmi("dtmi:standard:unit:year;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yobi", new Dtmi("dtmi:standard:unitprefix:yobi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yobibit", new Dtmi("dtmi:standard:unit:yobibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yobibitPerSecond", new Dtmi("dtmi:standard:unit:yobibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yobibyte", new Dtmi("dtmi:standard:unit:yobibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yobibytePerSecond", new Dtmi("dtmi:standard:unit:yobibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yocto", new Dtmi("dtmi:standard:unitprefix:yocto;2"), isMergeableType: false);
            context2_0.AddTermDefinition("yotta", new Dtmi("dtmi:standard:unitprefix:yotta;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zebi", new Dtmi("dtmi:standard:unitprefix:zebi;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zebibit", new Dtmi("dtmi:standard:unit:zebibit;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zebibitPerSecond", new Dtmi("dtmi:standard:unit:zebibitPerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zebibyte", new Dtmi("dtmi:standard:unit:zebibyte;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zebibytePerSecond", new Dtmi("dtmi:standard:unit:zebibytePerSecond;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zepto", new Dtmi("dtmi:standard:unitprefix:zepto;2"), isMergeableType: false);
            context2_0.AddTermDefinition("zetta", new Dtmi("dtmi:standard:unitprefix:zetta;2"), isMergeableType: false);
            versionedContexts.Add(context2_0);

            VersionedContext context3_0 = new VersionedContext("dtmi:dtdl:context;3", 3, 0, mergeDefinitions: false);
            context3_0.ReserveIdDefinitionPrefix("dtmi:dtdl:");
            context3_0.ReserveIdDefinitionPrefix("dtmi:standard:");
            context3_0.AddTermDefinition("AdjunctType", new Dtmi("dtmi:dtdl:class:AdjunctType;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Alias", new Dtmi("dtmi:dtdl:class:Alias;3"), isMergeableType: false);
            context3_0.AddTermDefinition("aliasFor", new Dtmi("dtmi:dtdl:property:aliasFor;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Array", new Dtmi("dtmi:dtdl:class:Array;3"), isMergeableType: false);
            context3_0.AddTermDefinition("asynchronous", new Dtmi("dtmi:dtdl:instance:CommandType:asynchronous;3"), isMergeableType: false);
            context3_0.AddTermDefinition("boolean", new Dtmi("dtmi:dtdl:instance:Schema:boolean;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Boolean", new Dtmi("dtmi:dtdl:class:Boolean;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Command", new Dtmi("dtmi:dtdl:class:Command;3"), isMergeableType: false);
            context3_0.AddTermDefinition("CommandPayload", new Dtmi("dtmi:dtdl:class:CommandPayload;3"), isMergeableType: false);
            context3_0.AddTermDefinition("CommandRequest", new Dtmi("dtmi:dtdl:class:CommandRequest;3"), isMergeableType: false);
            context3_0.AddTermDefinition("CommandResponse", new Dtmi("dtmi:dtdl:class:CommandResponse;3"), isMergeableType: false);
            context3_0.AddTermDefinition("commandType", new Dtmi("dtmi:dtdl:property:commandType;3"), isMergeableType: false);
            context3_0.AddTermDefinition("CommandType", new Dtmi("dtmi:dtdl:class:CommandType;3"), isMergeableType: false);
            context3_0.AddTermDefinition("comment", new Dtmi("dtmi:dtdl:property:comment;3"), isMergeableType: false);
            context3_0.AddTermDefinition("ComplexSchema", new Dtmi("dtmi:dtdl:class:ComplexSchema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Component", new Dtmi("dtmi:dtdl:class:Component;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Content", new Dtmi("dtmi:dtdl:class:Content;3"), isMergeableType: false);
            context3_0.AddTermDefinition("contents", new Dtmi("dtmi:dtdl:property:contents;3"), isMergeableType: false);
            context3_0.AddTermDefinition("date", new Dtmi("dtmi:dtdl:instance:Schema:date;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Date", new Dtmi("dtmi:dtdl:class:Date;3"), isMergeableType: false);
            context3_0.AddTermDefinition("dateTime", new Dtmi("dtmi:dtdl:instance:Schema:dateTime;3"), isMergeableType: false);
            context3_0.AddTermDefinition("DateTime", new Dtmi("dtmi:dtdl:class:DateTime;3"), isMergeableType: false);
            context3_0.AddTermDefinition("description", new Dtmi("dtmi:dtdl:property:description;3"), isMergeableType: false);
            context3_0.AddTermDefinition("displayName", new Dtmi("dtmi:dtdl:property:displayName;3"), isMergeableType: false);
            context3_0.AddTermDefinition("double", new Dtmi("dtmi:dtdl:instance:Schema:double;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Double", new Dtmi("dtmi:dtdl:class:Double;3"), isMergeableType: false);
            context3_0.AddTermDefinition("DtdlExtension", new Dtmi("dtmi:dtdl:meta:DtdlExtension;3"), isMergeableType: false);
            context3_0.AddTermDefinition("duration", new Dtmi("dtmi:dtdl:instance:Schema:duration;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Duration", new Dtmi("dtmi:dtdl:class:Duration;3"), isMergeableType: false);
            context3_0.AddTermDefinition("elementSchema", new Dtmi("dtmi:dtdl:property:elementSchema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Entity", new Dtmi("dtmi:dtdl:class:Entity;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Enum", new Dtmi("dtmi:dtdl:class:Enum;3"), isMergeableType: false);
            context3_0.AddTermDefinition("enumValue", new Dtmi("dtmi:dtdl:property:enumValue;3"), isMergeableType: false);
            context3_0.AddTermDefinition("EnumValue", new Dtmi("dtmi:dtdl:class:EnumValue;3"), isMergeableType: false);
            context3_0.AddTermDefinition("enumValues", new Dtmi("dtmi:dtdl:property:enumValues;3"), isMergeableType: false);
            context3_0.AddTermDefinition("exponent", new Dtmi("dtmi:dtdl:property:exponent;3"), isMergeableType: false);
            context3_0.AddTermDefinition("extends", new Dtmi("dtmi:dtdl:property:extends;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Field", new Dtmi("dtmi:dtdl:class:Field;3"), isMergeableType: false);
            context3_0.AddTermDefinition("fields", new Dtmi("dtmi:dtdl:property:fields;3"), isMergeableType: false);
            context3_0.AddTermDefinition("float", new Dtmi("dtmi:dtdl:instance:Schema:float;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Float", new Dtmi("dtmi:dtdl:class:Float;3"), isMergeableType: false);
            context3_0.AddTermDefinition("integer", new Dtmi("dtmi:dtdl:instance:Schema:integer;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Integer", new Dtmi("dtmi:dtdl:class:Integer;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Interface", new Dtmi("dtmi:dtdl:class:Interface;3"), isMergeableType: false);
            context3_0.AddTermDefinition("languageMajorVersion", new Dtmi("dtmi:dtdl:property:languageMajorVersion;3"), isMergeableType: false);
            context3_0.AddTermDefinition("LatentType", new Dtmi("dtmi:dtdl:class:LatentType;3"), isMergeableType: false);
            context3_0.AddTermDefinition("lineString", new Dtmi("dtmi:standard:schema:geospatial:lineString;3"), isMergeableType: false);
            context3_0.AddTermDefinition("long", new Dtmi("dtmi:dtdl:instance:Schema:long;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Long", new Dtmi("dtmi:dtdl:class:Long;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Map", new Dtmi("dtmi:dtdl:class:Map;3"), isMergeableType: false);
            context3_0.AddTermDefinition("mapKey", new Dtmi("dtmi:dtdl:property:mapKey;3"), isMergeableType: false);
            context3_0.AddTermDefinition("MapKey", new Dtmi("dtmi:dtdl:class:MapKey;3"), isMergeableType: false);
            context3_0.AddTermDefinition("mapValue", new Dtmi("dtmi:dtdl:property:mapValue;3"), isMergeableType: false);
            context3_0.AddTermDefinition("MapValue", new Dtmi("dtmi:dtdl:class:MapValue;3"), isMergeableType: false);
            context3_0.AddTermDefinition("maxMultiplicity", new Dtmi("dtmi:dtdl:property:maxMultiplicity;3"), isMergeableType: false);
            context3_0.AddTermDefinition("metamodel", new Dtmi("dtmi:dtdl:meta:metamodel;3"), isMergeableType: false);
            context3_0.AddTermDefinition("minMultiplicity", new Dtmi("dtmi:dtdl:property:minMultiplicity;3"), isMergeableType: false);
            context3_0.AddTermDefinition("model", new Dtmi("dtmi:dtdl:meta:model;3"), isMergeableType: false);
            context3_0.AddTermDefinition("multiLineString", new Dtmi("dtmi:standard:schema:geospatial:multiLineString;3"), isMergeableType: false);
            context3_0.AddTermDefinition("multiPoint", new Dtmi("dtmi:standard:schema:geospatial:multiPoint;3"), isMergeableType: false);
            context3_0.AddTermDefinition("multiPolygon", new Dtmi("dtmi:standard:schema:geospatial:multiPolygon;3"), isMergeableType: false);
            context3_0.AddTermDefinition("name", new Dtmi("dtmi:dtdl:property:name;3"), isMergeableType: false);
            context3_0.AddTermDefinition("NamedEntity", new Dtmi("dtmi:dtdl:class:NamedEntity;3"), isMergeableType: false);
            context3_0.AddTermDefinition("NamedLatentType", new Dtmi("dtmi:dtdl:class:NamedLatentType;3"), isMergeableType: false);
            context3_0.AddTermDefinition("NumericSchema", new Dtmi("dtmi:dtdl:class:NumericSchema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Object", new Dtmi("dtmi:dtdl:class:Object;3"), isMergeableType: false);
            context3_0.AddTermDefinition("point", new Dtmi("dtmi:standard:schema:geospatial:point;3"), isMergeableType: false);
            context3_0.AddTermDefinition("polygon", new Dtmi("dtmi:standard:schema:geospatial:polygon;3"), isMergeableType: false);
            context3_0.AddTermDefinition("PrimitiveSchema", new Dtmi("dtmi:dtdl:class:PrimitiveSchema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("properties", new Dtmi("dtmi:dtdl:property:properties;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Property", new Dtmi("dtmi:dtdl:class:Property;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Relationship", new Dtmi("dtmi:dtdl:class:Relationship;3"), isMergeableType: false);
            context3_0.AddTermDefinition("request", new Dtmi("dtmi:dtdl:property:request;3"), isMergeableType: false);
            context3_0.AddTermDefinition("response", new Dtmi("dtmi:dtdl:property:response;3"), isMergeableType: false);
            context3_0.AddTermDefinition("schema", new Dtmi("dtmi:dtdl:property:schema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Schema", new Dtmi("dtmi:dtdl:class:Schema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("SchemaField", new Dtmi("dtmi:dtdl:class:SchemaField;3"), isMergeableType: false);
            context3_0.AddTermDefinition("schemas", new Dtmi("dtmi:dtdl:property:schemas;3"), isMergeableType: false);
            context3_0.AddTermDefinition("SemanticType", new Dtmi("dtmi:dtdl:class:SemanticType;3"), isMergeableType: false);
            context3_0.AddTermDefinition("SemanticUnit", new Dtmi("dtmi:dtdl:class:SemanticUnit;3"), isMergeableType: false);
            context3_0.AddTermDefinition("string", new Dtmi("dtmi:dtdl:instance:Schema:string;3"), isMergeableType: false);
            context3_0.AddTermDefinition("String", new Dtmi("dtmi:dtdl:class:String;3"), isMergeableType: false);
            context3_0.AddTermDefinition("symbol", new Dtmi("dtmi:dtdl:property:symbol;3"), isMergeableType: false);
            context3_0.AddTermDefinition("synchronous", new Dtmi("dtmi:dtdl:instance:CommandType:synchronous;3"), isMergeableType: false);
            context3_0.AddTermDefinition("target", new Dtmi("dtmi:dtdl:property:target;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Telemetry", new Dtmi("dtmi:dtdl:class:Telemetry;3"), isMergeableType: false);
            context3_0.AddTermDefinition("TemporalSchema", new Dtmi("dtmi:dtdl:class:TemporalSchema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("time", new Dtmi("dtmi:dtdl:instance:Schema:time;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Time", new Dtmi("dtmi:dtdl:class:Time;3"), isMergeableType: false);
            context3_0.AddTermDefinition("Unit", new Dtmi("dtmi:dtdl:class:Unit;3"), isMergeableType: false);
            context3_0.AddTermDefinition("UnitAttribute", new Dtmi("dtmi:dtdl:class:UnitAttribute;3"), isMergeableType: false);
            context3_0.AddTermDefinition("valueSchema", new Dtmi("dtmi:dtdl:property:valueSchema;3"), isMergeableType: false);
            context3_0.AddTermDefinition("writable", new Dtmi("dtmi:dtdl:property:writable;3"), isMergeableType: false);
            versionedContexts.Add(context3_0);

            return new ContextHistory(versionedContexts);
        }
    }
}
